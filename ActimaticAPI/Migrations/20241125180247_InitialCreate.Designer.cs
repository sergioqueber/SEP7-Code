// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ActimaticAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241125180247_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Model.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwardedPoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StaffId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("StaffId");

                    b.ToTable("Activities");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Model.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmissionsSaved")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Model.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StaffId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TeamId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Model.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.CarPool", b =>
                {
                    b.HasBaseType("Model.Activity");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmptySeats")
                        .HasColumnType("INTEGER");

                    b.ToTable("CarPools", (string)null);
                });

            modelBuilder.Entity("Model.SavingFood", b =>
                {
                    b.HasBaseType("Model.Activity");

                    b.Property<int>("PackagesSaved")
                        .HasColumnType("INTEGER");

                    b.ToTable("SavingFoods", (string)null);
                });

            modelBuilder.Entity("Model.Stairs", b =>
                {
                    b.HasBaseType("Model.Activity");

                    b.Property<int>("Floors")
                        .HasColumnType("INTEGER");

                    b.ToTable("Stairs", (string)null);
                });

            modelBuilder.Entity("Model.Transport", b =>
                {
                    b.HasBaseType("Model.Activity");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmissionsSaved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Transports", (string)null);
                });

            modelBuilder.Entity("Model.Volunteering", b =>
                {
                    b.HasBaseType("Model.Activity");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Volunteerings", (string)null);
                });

            modelBuilder.Entity("Model.Admin", b =>
                {
                    b.HasBaseType("Model.User");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.HasBaseType("Model.User");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AdminId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReportId");

                    b.HasIndex("TeamId");

                    b.ToTable("Staffs", (string)null);
                });

            modelBuilder.Entity("Model.Activity", b =>
                {
                    b.HasOne("Model.Report", null)
                        .WithMany("CompletedActivities")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Staff", null)
                        .WithMany("Activities")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("Model.Reward", b =>
                {
                    b.HasOne("Model.Report", null)
                        .WithMany("AwardedRewards")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Staff", null)
                        .WithMany("Rewards")
                        .HasForeignKey("StaffId");

                    b.HasOne("Model.Team", null)
                        .WithMany("TeamRewards")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Model.Team", b =>
                {
                    b.HasOne("Model.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Model.CarPool", b =>
                {
                    b.HasOne("Model.Activity", null)
                        .WithOne()
                        .HasForeignKey("Model.CarPool", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.SavingFood", b =>
                {
                    b.HasOne("Model.Activity", null)
                        .WithOne()
                        .HasForeignKey("Model.SavingFood", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Stairs", b =>
                {
                    b.HasOne("Model.Activity", null)
                        .WithOne()
                        .HasForeignKey("Model.Stairs", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Transport", b =>
                {
                    b.HasOne("Model.Activity", null)
                        .WithOne()
                        .HasForeignKey("Model.Transport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Volunteering", b =>
                {
                    b.HasOne("Model.Activity", null)
                        .WithOne()
                        .HasForeignKey("Model.Volunteering", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Admin", b =>
                {
                    b.HasOne("Model.User", null)
                        .WithOne()
                        .HasForeignKey("Model.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.HasOne("Model.Admin", null)
                        .WithMany("ToApprove")
                        .HasForeignKey("AdminId");

                    b.HasOne("Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.User", null)
                        .WithOne()
                        .HasForeignKey("Model.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Report", null)
                        .WithMany("ActiveParticipants")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Model.Report", b =>
                {
                    b.Navigation("ActiveParticipants");

                    b.Navigation("AwardedRewards");

                    b.Navigation("CompletedActivities");
                });

            modelBuilder.Entity("Model.Team", b =>
                {
                    b.Navigation("TeamRewards");
                });

            modelBuilder.Entity("Model.Admin", b =>
                {
                    b.Navigation("ToApprove");
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
