@page "/record-activity"
@using Interfaces
@using Model
@using AppServices
@inject ActivitiesService activitiesService
@inject AppInterfaces.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject IUserService userService

<div class="container mb-4">
    <h3 class="mb-4">Record an activity</h3>
    <div class="row g-4">
        <div class="col-md-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Transport</h5>
                    <p class="card-text">Record your transport activity</p>
                    <button class="btn btn-primary" @onclick="() => ShowModal(ActivityType.Transport)">
                        Record
                    </button>
                </div>
            </div>

        </div>
        <div class="col-md-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Stairs</h5>
                    <p class="card-text">Record your stair climbing activities</p>
                    <button class="btn btn-primary" @onclick="() => ShowModal(ActivityType.Stairs)">
                        Record
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Food Saving</h5>
                    <p class="card-text">Record your food saving activities</p>
                    <button class="btn btn-primary" @onclick="() => ShowModal(ActivityType.FoodSaving)">
                        Record
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Volunteering</h5>
                    <p class="card-text">Record Volunteering activities</p>
                    <button class="btn btn-primary" @onclick="() => ShowModal(ActivityType.Volunteering)">
                        Record
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Carpool </h5>
                    <p class="card-text">Record when your caarpool</p>
                    <button class="btn btn-primary" @onclick="() => ShowModal(ActivityType.CarPool)">
                        Record
                    </button>
                </div>
            </div>
        </div>
    </div>
    @if (showModal)
    {
        <div class="modal shadow d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class=" modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> Record @currentActivityType</h5>
                        <button type="button" class="btn-close" @onclick="closeModal"></button>
                    </div>
                    <div class=" modal-body">
                        @switch (currentActivityType)
                        {
                            case ActivityType.Transport:
                                <EditForm Model="@transportActivity" OnValidSubmit="@RecordActivities">
                                    <DataAnnotationsValidator />
                                    <div class="mb-3">
                                        <label class="form-label" activities>Custom Name</label>
                                        <InputText @bind-Value="@transportActivity.Name" class="form-control" />
                                    </div>
                                    <div class=" mb-3">
                                        <label class="form-label">Distance</label>
                                        <InputNumber @bind-Value="@transportActivity.Distance" class="form-control" required />
                                    </div>
                                    <div class=" mb-3">
                                        <label class="form-label">Transport Type</label>
                                        <InputSelect @bind-Value="@transportActivity.Type" class="form-control" required>
                                            <option value="" selected>Select transport type...</option>
                                            <option value="Train">Train</option>
                                            <option value="Bus"> Bus</option>
                                            <option value="Bike">Bike</option>
                                            <option value="Walk">Walk</option>
                                        </InputSelect>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </EditForm>
                                break;
                            case ActivityType.Stairs:
                                <EditForm Model="@stairsActivity" OnValidSubmit="RecordActivities">
                                    <DataAnnotationsValidator />
                                    <div class="mb-3">
                                        <label class="form-label" activities>Custom Name</label>
                                        <InputText @bind-Value="@stairsActivity.Name" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Floors</label>
                                        <InputNumber @bind-Value="stairsActivity.Floors" class="form-control" required />
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </EditForm>
                                break;

                            case ActivityType.FoodSaving:
                                <EditForm Model="@foodSavingActivity" OnValidSubmit="RecordActivities">
                                    <DataAnnotationsValidator />
                                    <div class="mb-3">
                                        <label class="form-label" activities>Custom Name</label>
                                        <InputText @bind-Value="@foodSavingActivity.Name" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Packages collected </label>
                                        <InputNumber @bind-Value="foodSavingActivity.PackagesSaved" class="form-control" required />
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </EditForm>
                                break;
                            case ActivityType.Volunteering:
                                <EditForm Model="@volunteeringActivity" OnValidSubmit="RecordActivities">
                                    <DataAnnotationsValidator />
                                    <div class="mb-3">
                                        <label class="form-label" activities>Custom Name</label>
                                        <InputText @bind-Value="@volunteeringActivity.Name" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Hours</label>
                                        <InputNumber @bind-Value="volunteeringActivity.Hours" class="form-control" required />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Location</label>
                                        <InputText @bind-Value="volunteeringActivity.Location" class="form-control" required />
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </EditForm>
                                break;
                            case ActivityType.CarPool:
                                <EditForm Model="@carPoolActivity" OnValidSubmit="RecordActivities">
                                    <DataAnnotationsValidator />
                                    <div class="mb-3">
                                        <label class="form-label">Custom Name</label>
                                        <InputText @bind-Value="@carPoolActivity.Name" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Distance</label>
                                        <InputNumber @bind-Value="carPoolActivity.Distance" class="form-control" required />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Passengers</label>
                                        <InputNumber @bind-Value="carPoolActivity.EmptySeats" class="form-control" required />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Car Type</label>
                                        <InputSelect @bind-Value="carPoolActivity.CarType" class="form-control">
                                            <option value="Electric">Electric</option>
                                            <option value="Hybrid">Hybrid</option>
                                            <option value="Petrol">Petrol</option>
                                            <option value="Diesel">Diesel</option>
                                        </InputSelect>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </EditForm>
                                break;
                        }
                    </div>

                </div>
            </div>
        </div>
        <div class="modal-backdrop show"></div>

    }
    @if (showNotification)
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 9999">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <strong class="me-auto">Activity Recorded!</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideNotification"></button>
                </div>
                <div class="toast-body">
                    Congratulations! You earned @earnedPoints points! 🎉
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool showModal = false;
    private bool showNotification = false;
    private int earnedPoints = 0;
    private User currentUser = new User();
    private ActivityType currentActivityType;
    private Transport? transportActivity = new Transport();
    private Stairs? stairsActivity = new Stairs();
    private SavingFood? foodSavingActivity = new SavingFood();
    private Volunteering? volunteeringActivity = new Volunteering();
    private CarPool? carPoolActivity = new CarPool();
    private DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);
    private bool isLoggedIn;
    [Parameter]
    public EventCallback<int> OnPointsUpdated { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    [Parameter] public int currentUserId { get; set; }
    private IEnumerable<Claim>? userClaims;
    private enum ActivityType
    {
        Transport,
        Stairs,
        FoodSaving,
        Volunteering,
        CarPool
    }
    protected override async Task OnInitializedAsync()
    {
        currentUser = await userService.GetUserById(currentUserId);
    }
    private async Task ShowPointsNotification(int points)
    {
        earnedPoints = points;
        showNotification = true;
        StateHasChanged();
        await Task.Delay(7000); // Hide after 3 seconds
        showNotification = false;
        StateHasChanged();
    }

    private void HideNotification()
    {
        showNotification = false;
    }
    private void ShowModal(ActivityType activityType)
    {
        currentActivityType = activityType;
        showModal = true;
    }
    private void closeModal()
    {
        showModal = false;
    }

    private async Task RecordActivities()
    {
        switch (currentActivityType)
        {
            case ActivityType.Transport:
                transportActivity.UserId = currentUserId; //Use claims to state the user ID here
                transportActivity.Date = currentDate;
                var recordedTrassport = await activitiesService.CreateTransport(transportActivity);
                currentUser.Points += recordedTrassport.AwardedPoints;
                await userService.UpdateUser(currentUser);
                await OnPointsUpdated.InvokeAsync(currentUser.Points); // Notify parent
                showModal = false;
                await ShowPointsNotification(recordedTrassport.AwardedPoints);
                transportActivity = new Transport();
                StateHasChanged();
                break;
            case ActivityType.Stairs:
                stairsActivity.UserId = currentUserId; //Use claims to state the user ID here
                stairsActivity.Date = currentDate;
                var recordedStairs = await activitiesService.CreateStairsAsync(stairsActivity);
                currentUser.Points += recordedStairs.AwardedPoints;
                await userService.UpdateUser(currentUser);
                await OnPointsUpdated.InvokeAsync(currentUser.Points); // Notify parent
                showModal = false;
                await ShowPointsNotification(recordedStairs.AwardedPoints);
                stairsActivity = new Stairs();
                StateHasChanged();
                break;
            case ActivityType.FoodSaving:
                foodSavingActivity.UserId = currentUserId; //Use claims to state the user ID here
                foodSavingActivity.Date = currentDate;
                var recordedFoodActivity = await activitiesService.CreateSavingFoodAsync(foodSavingActivity);
                currentUser.Points += recordedFoodActivity.AwardedPoints;
                await userService.UpdateUser(currentUser);
                await OnPointsUpdated.InvokeAsync(currentUser.Points); // Notify parent
                showModal = false;
                await ShowPointsNotification(recordedFoodActivity.AwardedPoints);
                foodSavingActivity = new SavingFood();
                StateHasChanged();
                break;
            case ActivityType.Volunteering:
                volunteeringActivity.UserId = currentUserId; //Use claims to state the user ID here
                volunteeringActivity.Date = currentDate;
                var recordedVolunteering = await activitiesService.CreateVolunteeringAsync(volunteeringActivity);
                currentUser.Points += recordedVolunteering.AwardedPoints;
                await userService.UpdateUser(currentUser);
                await OnPointsUpdated.InvokeAsync(currentUser.Points); // Notify parent
                showModal = false;
                await ShowPointsNotification(recordedVolunteering.AwardedPoints);
                volunteeringActivity = new Volunteering();
                StateHasChanged();
                break;
            case ActivityType.CarPool:
                carPoolActivity.UserId = currentUserId; //Use claims to state the user ID here
                carPoolActivity.Date = currentDate;
                var recodedCarPool = await activitiesService.CreateCarPool(carPoolActivity);
                currentUser.Points += recodedCarPool.AwardedPoints;
                await userService.UpdateUser(currentUser);
                await OnPointsUpdated.InvokeAsync(currentUser.Points); // Notify parent
                showModal = false;
                await ShowPointsNotification(recodedCarPool.AwardedPoints);
                carPoolActivity = new CarPool();
                StateHasChanged();
                break;
        }
        showModal = false;
    }
}
<style>
    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .toast {
        transition: opacity 0.3s ease-in-out;
    }
</style>