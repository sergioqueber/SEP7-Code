@page "/"
@inject AppInterfaces.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Interfaces
@using Model
@inject IUserService userService
@inject AppServices.ActivitiesService ActivitiesService
@attribute [Authorize]

<PageTitle>Home</PageTitle>

<ApprovalWarning>

    <div class="container-fluid">
        <div class="row mt-3">
            <div class="col-md-12">
                @if (totalEmissions > 1000)
                {
                <h1 class="text-center">Your total points are @totalPoints</h1>
                <h2 class="text-center">You saved @(totalEmissions/1000) kg of CO2</h2>
                }
                else if (totalEmissions > 0)
                {
                <h1 class="text-center">Your total points are @totalPoints</h1>
                <h2 class="text-center">You saved @totalEmissions g of CO2</h2>
                    }
                else {
                    <h1 class="text-center">Your total points are @totalPoints</h1>
                    }
            </div>
        </div>
        <div class="row">
            <!-- Left side - Activities -->
            <div class="col-md-6 p-4">
                <RecordActivity currentUserId="@currentUserId" OnPointsUpdated="UpdatePoints"></RecordActivity>
            </div>

        <!-- Right side - Future content -->
        <div class="col-md-6 p-4">
            
            <Activities userId="@currentUserId" amount ="few"></Activities>
        </div>
    </div>
</div>
</ApprovalWarning>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private int currentUserId;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn = false;
    private int totalPoints;
    private int totalEmissions;
    private IEnumerable<Transport> transports;
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal userToLog = authState.User;
        isLoggedIn = userToLog.Identity != null;

        if (!isLoggedIn) return;
        userClaims = userToLog.Claims;
        currentUserId = int.Parse(userToLog.Claims.First(claim => claim.Type.Equals("Id")).Value);
        Console.WriteLine("Id is : " + currentUserId);

        var currentUser = await userService.GetUserById(currentUserId);
        totalPoints = currentUser.Points;
        transports = (await ActivitiesService.GetAllTransport()).Where(t => t.UserId == currentUserId);
        totalEmissions = transports.Sum(t => t.EmissionsSaved);
        
    }

    private async Task UpdatePoints(int points)
    {
        var currentUser = await userService.GetUserById(currentUserId);
        totalPoints = currentUser.Points;
        StateHasChanged();
    }
}