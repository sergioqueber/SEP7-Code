@page "/myactivities"
@using Interfaces
@using AppServices
@using Model
@inject ActivitiesService ActivitiesService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]

<Activities userId="@userId"></Activities>

@code {
    
    private int userId;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
{
    try 
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            userId = int.Parse(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
            Console.WriteLine($"Loading activities for user: {userId}");
           // await LoadActivities();
        }
        else
        {
            Console.WriteLine("User not authenticated");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in initialization: {ex.Message}");
    }
   
}

}