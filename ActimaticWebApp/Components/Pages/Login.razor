@page "/login"
@using Dto;
@using AppInterfaces
@inject AppInterfaces.IAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@* <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <input type="hidden" name="FormName" value="LoginForm" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="userId">User Id</label>
        <InputText id="userId" class="form-control" @bind-Value="loginModel.Id" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm> *@


<div class="login-container">
    <!-- Branding Section -->
    <div class="branding text-center text-md-start">
        <h1 class="fw-bold text-primary">Actimatic</h1>
        <p class="text-muted">Get rewards by making the world a better place</p>
    </div>

    <!-- Login Form -->
    <AuthorizeView>
        <NotAuthorized>
            <div class="container d-flex justify-content-center align-items-center vh-100">
                <div class="card p-4 shadow-sm" style="max-width: 400px; width: 100%;">
                    <h3 class="text-center mb-4">Please login</h3>
                    <div class="mb-3">
                        <label for="id" class="form-label">Id:</label>
                        <input type="number" id="id" @bind="loginModel.Id" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <input type="password" id="password" @bind="loginModel.Password" class="form-control" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="mb-3">
                            <label class="text-danger">
                                @errorMessage
                            </label>
                        </div>
                    }
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="HandleLogin">Log in</button>
                        <button class="btn btn-secondary" @onclick="Register"> Register</button>
                    </div>
                </div>
            </div>

        </NotAuthorized>
        <Authorized>
            <p>You are already logged in</p>
            <button @onclick="Logout" class="loginbtn">
                Log out
            </button>
        </Authorized>
    </AuthorizeView>

</div>

@code {
    private UserLogInDTO loginModel = new UserLogInDTO();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            await AuthService.LoginAsync(loginModel.Id, loginModel.Password);
            Console.WriteLine("Logged in");
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
    private async Task Register()
    {
        Navigation.NavigateTo($"/register");
    }
      private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}