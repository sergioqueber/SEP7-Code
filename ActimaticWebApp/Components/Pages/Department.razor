@page "/departments"
@using Interfaces;
@using Model;
@inject IDepartmentService DepartmentService
@inject ITeamService TeamService
@inject AppInterfaces.IAuthService AuthService
@using Microsoft.AspNetCore.Authorization

<div class="container mt-5">
    <AuthorizeView Policy="MustBeAdminOrManager">
        <Authorized>
            

            @if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

                <div class="card shadow mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Create a New Department</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="departmentName" class="form-label"><b>Department Name</b></label>
                            <input id="departmentName" @bind="newDepartmentName" placeholder="Enter department name" class="form-control" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button @onclick="CreateDepartment" class="btn btn-success me-2">Submit</button>
                        </div>
                    </div>
                </div>
            @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3 text-center">@successMessage</div>
    }

            
                <div class="card shadow mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h4 class="mb-0">Add Teams to a Department</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="departmentSelect" class="form-label"><b>Select Department</b></label>
                            <select id="departmentSelect" @bind="selectedDepartmentId" class="form-control">
                                <option value="0">-- Select a Department --</option>
                                @foreach (var department in availableDepartments)
                                {
                                    <option value="@department.Id">@department.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><b>Select Teams to Add:</b></label>
                            
                                @foreach (var team in availableTeams)
                                {<div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="team_@team.Id" @onchange="e => ToggleTeamSelection(e, team.Id)" />
                                    <label class="form-check-label" for="team_@team.Id">
                                        @team.Name
                                    </label></div>
                                }
                            
                        </div>
                        <div class="d-flex justify-content-end">
                            <button @onclick="AddTeamsToDepartment" class="btn btn-success me-2">Submit</button>
                        </div>
                    </div>
                </div>
                <div class="card shadow mb-4">
                    <div class="card-header bg-info text-white">
                    <h4 class="mb-0">Departments</h4>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var department in availableDepartments)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @if (editingDepartmentId == department.Id)
                                {
                                    <input type="text" @bind="department.Name" class="form-control me-2" />
                                    <button @onclick="async () => await SaveDepartment(department)" class="btn btn-primary me-2">Save</button>
                                    <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
                                }
                                else
                                {
                                    @department.Name
                                    <button @onclick="() => EditDepartment(department.Id)" class="btn btn-warning ms-2">Edit</button>
                                }
                            </li>
                        }
                    </ul>
                </div></div>

        </Authorized>
    </AuthorizeView>

    
</div>

@code {
    private string newDepartmentName = string.Empty;
    private int selectedDepartmentId = 0;
    private List<int> selectedTeamIds = new();
    private List<Model.Department> availableDepartments = new();
    private List<Team> availableTeams = new();
    
    private string successMessage = string.Empty;
    private int? editingDepartmentId = null;
    private string errorMessage = string.Empty;


    protected override async Task OnInitializedAsync()
{
    try
    {
        availableDepartments = (await DepartmentService.GetAllDepartments()).ToList();
        availableTeams = (await TeamService.GetAllTeams()).ToList();
    }
    catch (Exception ex)
    {
        errorMessage = "Failed to load departments or teams.";
        Console.WriteLine($"Error: {ex.Message}");
    }
}

    private void EditDepartment(int departmentId)
    {
        editingDepartmentId = departmentId;
    }

    private async Task SaveDepartment(Model.Department department)
    {
        await DepartmentService.Update(department);
        editingDepartmentId = null;
        availableDepartments = (await DepartmentService.GetAllDepartments()).ToList();
    }

    private void CancelEdit()
    {
        editingDepartmentId = null;
    }

    

    private async Task CreateDepartment()
    {
        try
        {
            if (string.IsNullOrEmpty(newDepartmentName))
            {
                Console.WriteLine("Department name cannot be empty.");
                return;
            }

            var newDepartment = new Model.Department
            {
                Name = newDepartmentName
            };

            var createdDepartment = await DepartmentService.Create(newDepartment);

            if (createdDepartment != null)
            {
                successMessage = $"Department '{createdDepartment.Name}' created successfully!";
                newDepartmentName = string.Empty;
                availableDepartments.Add(createdDepartment);
                StateHasChanged();
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating department: {ex.Message}");
        }
    }

    

    private void ToggleTeamSelection(ChangeEventArgs e, int teamId)
    {
        var isChecked = e?.Value != null && (bool)e.Value;
        if (isChecked && !selectedTeamIds.Contains(teamId))
        {
            selectedTeamIds.Add(teamId);
        }
        else if (!isChecked && selectedTeamIds.Contains(teamId))
        {
            selectedTeamIds.Remove(teamId);
        }
    }

    private async Task AddTeamsToDepartment()
    {
        try
        {
            if (selectedDepartmentId == 0)
            {
                Console.WriteLine("Please select a valid department.");
                return;
            }

            if (!selectedTeamIds.Any())
            {
                Console.WriteLine("Please select at least one team to add.");
                return;
            }

            var department = await DepartmentService.GetDepartmentById(selectedDepartmentId);
            if (department != null)
            {
                department.Teams ??= new List<Team>();

                foreach (var teamId in selectedTeamIds)
                {
                    var team = await TeamService.GetTeamById(teamId);
                    if (team != null && !department.Teams.Any(t => t.Id == teamId))
                    {
                        department.Teams.Add(team);
                    }
                }

                await DepartmentService.Update(department);

                successMessage = "Teams added to the department successfully!";
                selectedDepartmentId = 0;
                selectedTeamIds.Clear();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding teams to the department: {ex.Message}");
        }
    }
}