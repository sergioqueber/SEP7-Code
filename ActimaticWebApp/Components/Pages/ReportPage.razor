@page "/report"
@using Interfaces
@using AppServices
@inject IReportService ReportService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Model
@inject AppInterfaces.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService ProfileService
@inject ITeamService TeamService
@inject ITransportService TransportService
@inject ISavingFoodService SavingFoodService
@inject IVolunteeringService VolunteeringService
@inject IStairsService StairsService
@inject ICarPoolService CarPoolService
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container my-4">
    <main>
        <EditForm Model="report" OnValidSubmit="NewReport">
            <div class="mb-3 col-md-3">
                <label for="startDate" class="form-label">Start Date</label>
                <InputDate @bind-Value="@report.StartDate" class="form-control" />
            </div>
            <div class="mb-3 col-md-3">
                <label for="endDate" class="form-label">End Date</label>
                <InputDate @bind-Value="@report.EndDate" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
        <h2 class="mb-4">ESG Report</h2>
        <label for="kind">Select kind of report:</label>
        <InputSelect id="kind" @bind-Value="tempKind">
            <option value="0">-- Select kind --</option>
            <option value="1">Team</option>
            <option value="2">Specific worker</option>
            <option value="3">Everyone</option>
        </InputSelect>
        <button @onclick="ConfirmSelection" class="btn btn-primary">iuhbihbhijk</button>
        <div class="row">
            <div class="col-md-3">
                <div class="card mb-4">
                    <div class="card-body">
                        @if (kind == 1)
                        {
                            if (Teams == null)
                            {
                                <p>Loading teams...</p>
                            }
                            else
                            {
                                <h5 class="card-title">Teams</h5>
                                <InputRadioGroup @bind-Value="selectedTeamId" class="list-unstyled">
                                    @foreach (var team in Teams)
                                    {
                                        <li>
                                            <label>
                                                <InputRadio Value="@team.Id" /> @team.Name
                                            </label>
                                        </li>
                                    }
                                </InputRadioGroup>
                            }
                        }
                        @if (kind == 2)
                        {
                            if (users == null)
                            {
                                <p>Loading employees...</p>
                            }
                            else
                            {
                                <h5 class="card-title">Employees</h5>
                                <InputRadioGroup @bind-Value="selectedUserId" class="list-unstyled">
                                    @foreach (var user in users)
                                    {
                                            <label>
                                                <InputRadio Value="@user.Id" /> @user.Name @user.Surname
                                            </label>
                                    }
                                </InputRadioGroup>
                            }
                        }
                        @if (kind == 3)
                        {
                            <h5 class="card-title">Report for the whole company</h5>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="chart-container mb-4">
                    @if (carPools != null)
                    {
                        <h3>Car pooling activities</h3>
                        <ul>
                            @foreach (var carPool in carPools)
                            {
                                <li>@carPool.Name: @carPool.AwardedPoints</li>
                                <li>Date: @carPool.Date</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No car pooling activities in selected period of time</p>
                    }
                    @if (transports != null)
                    {
                        <h3>Transport activities</h3>
                        <ul>
                            @foreach (var transport in transports)
                            {
                                <li>@transport.Name: @transport.AwardedPoints</li>
                                <li>Date: @transport.Date</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No transport activities in selected period of time</p>
                    }
                    @if (volunteerings != null)
                    {
                        <h3>Volunteering activities</h3>
                        <ul>
                            @foreach (var volunteering in volunteerings)
                            {
                                <li>@volunteering.Name: @volunteering.AwardedPoints</li>
                                <li>Date: @volunteering.Date</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No volunteering activities in selected period of time</p>
                    }
                    @if (savingFoods != null)
                    {
                        <h3>Saving foods activities</h3>
                        <ul>
                            @foreach (var savingFood in savingFoods)
                            {
                                <li>@savingFood.Name: @savingFood.AwardedPoints</li>
                                <li>Date: @savingFood.Date</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No saving food activities in selected period of time</p>
                    }
                    @if (stairs != null)
                    {
                        <h3>Saving foods activities</h3>
                        <ul>
                            @foreach (var stair in stairs)
                            {
                                <li>@stair.Name: @stair.AwardedPoints</li>
                                <li>Date: @stair.Date</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No stairs activities in selected period of time</p>
                    }
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Stats</h5>
                        <p>Emissions saved: @EmissionsSaved</p>
                        <p>Food saved: @SavedFood kg</p>
                        <p>Hours volunteered: @HoursVolunteered</p>
                        <p>Floors covered: @FloorsCovered</p>
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>
@code {
    private User? user = null;
    private IEnumerable<User>? users;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int id;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private Report report = new Report();
    private int kind;
    private int tempKind;
    public IEnumerable<Team>? Teams { get; set; }
    private IEnumerable<User> TeamUsers = Enumerable.Empty<User>();
    private int selectedTeamId;
    private int selectedUserId;
    private IEnumerable<CarPool>? carPools = Enumerable.Empty<CarPool>();
    private IEnumerable<Transport>? transports = Enumerable.Empty<Transport>();
    private IEnumerable<SavingFood>? savingFoods = Enumerable.Empty<SavingFood>();
    private IEnumerable<Stairs>? stairs = Enumerable.Empty<Stairs>();
    private IEnumerable<Volunteering>? volunteerings = Enumerable.Empty<Volunteering>();
    private int EmissionsSaved;
    private int SavedFood;
    private int HoursVolunteered;
    private int FloorsCovered;
    private Team? team = null;


    @* protected override async Task OnInitializedAsync()
    {
        user = await ProfileService.GetUserProfile(1);
    } *@
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            if (authState == null)
            {
                Console.WriteLine("authState not found.");
            }
            ClaimsPrincipal userToLog = authState.User;
            isLoggedIn = userToLog.Identity != null;

            var role = userToLog.Claims.FirstOrDefault(c => c.Type == "Role")?.Value;
            Console.WriteLine($"User is authenticated with role: {role}");

            if (!isLoggedIn) return;
            userClaims = userToLog.Claims;
            id = int.Parse(userToLog.Claims.First(claim => claim.Type.Equals("Id")).Value);
            Console.WriteLine("Id is : " + id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }

        user = await ProfileService.GetUserById(id);
        report.StartDate = DateOnly.FromDateTime(DateTime.Now);
        report.EndDate = DateOnly.FromDateTime(DateTime.Now);


    }
    
    private async Task NewReport()
    {
        Console.WriteLine(report.StartDate);
        Console.WriteLine(report.EndDate);
        carPools = await CarPoolService.GetCarPoolByDatesAsync(report.StartDate, report.EndDate);
        transports = await TransportService.GetTransportByDatesAsync(report.StartDate, report.EndDate);
        savingFoods = await SavingFoodService.GetSavingFoodByDatesAsync(report.StartDate, report.EndDate);
        stairs = await StairsService.GetStairsByDatesAsync(report.StartDate, report.EndDate);
        volunteerings = await VolunteeringService.GetVolunteeringByDatesAsync(report.StartDate, report.EndDate);
    }
    private int CalcEmissions(IEnumerable<Transport> transports)
    {
        int sum = 0;
        if (transports != null)
        {
            foreach (var transport in transports)
            {
                sum += transport.EmissionsSaved;
            }
        }
        return sum;
    }
    private int CalcFood(IEnumerable<SavingFood> savingFoods)
    {
        int sum = 0;
        if (savingFoods != null)
        {
            foreach (var savings in savingFoods)
            {
                sum += savings.PackagesSaved;
            }
        }
        return sum;
    }
    private int CalcHours(IEnumerable<Volunteering> volunteerings)
    {
        int sum = 0;
        if (volunteerings != null)
        {
            foreach (var vol in volunteerings)
            {
                sum += vol.Hours;
            }
        }
        return sum;
    }
    private int CalcFloors(IEnumerable<Stairs> stairs)
    {
        int sum = 0;
        if (stairs != null)
        {
            foreach (var stair in stairs)
            {
                sum += stair.Floors;
            }
        }
        return sum;
    }
    private async Task HandleSelect(int value)
    {   
        if (value == 0)
            Console.WriteLine("This was 0");
        if (value == 1)
        {
            Teams = await TeamService.GetAllTeams();
            team = await TeamService.GetTeamById(selectedTeamId);
            IEnumerable<CarPool> carPoolsByTeam = Enumerable.Empty<CarPool>();
            IEnumerable<SavingFood> savingFoodByTeam = Enumerable.Empty<SavingFood>();
            IEnumerable<Transport> transportsByTeam = Enumerable.Empty<Transport>();
            IEnumerable<Stairs> stairsByTeam = Enumerable.Empty<Stairs>();
            IEnumerable<Volunteering> volunteeringsByTeam = Enumerable.Empty<Volunteering>();

            if (team != null)
            {
                foreach (var user in team.Staff)
                {
                    carPoolsByTeam = carPoolsByTeam.Concat(carPools.Where(x => x.UserId == user.Id));
                    savingFoodByTeam = savingFoodByTeam.Concat(savingFoods.Where(x => x.UserId == user.Id));
                    transportsByTeam = transportsByTeam.Concat(transports.Where(x => x.UserId == user.Id));
                    stairsByTeam = stairsByTeam.Concat(stairs.Where(x => x.UserId == user.Id));
                    volunteeringsByTeam = volunteeringsByTeam.Concat(volunteerings.Where(x => x.UserId == user.Id));
                }
            }
            EmissionsSaved = CalcEmissions(transportsByTeam);
            SavedFood = CalcFood(savingFoodByTeam);
            HoursVolunteered = CalcHours(volunteeringsByTeam);
            FloorsCovered = CalcFloors(stairsByTeam);
        }
        else if (value == 2)
        {
            users = await ProfileService.GetAllUsers();
            var carPoolsByUser = carPools.Where(x => x.UserId == selectedUserId);
            var volunteeringsByUser = volunteerings.Where(x => x.UserId == selectedUserId);
            var savingFoodsByUser = savingFoods.Where(x => x.UserId == selectedUserId);
            var stairsByUser = stairs.Where(x => x.UserId == selectedUserId);
            var transportsByUser = transports.Where(x => x.UserId == selectedUserId);
            EmissionsSaved = CalcEmissions(transportsByUser);
            SavedFood = CalcFood(savingFoodsByUser);
            HoursVolunteered = CalcHours(volunteeringsByUser);
            FloorsCovered = CalcFloors(stairsByUser);
            Console.WriteLine("Loading users"
            );
        }
        else if (value == 3)
        {
            //users = await ProfileService.GetAllUsers();
            EmissionsSaved = CalcEmissions(transports);
            SavedFood = CalcFood(savingFoods);
            HoursVolunteered = CalcHours(volunteerings);
            FloorsCovered = CalcFloors(stairs);
        }
    }
    private async Task ConfirmSelection(){
        kind = tempKind;
        await HandleSelect(kind);
        StateHasChanged();
    }
}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    header h1 {
        font-size: 2rem;
        font-weight: bold;
    }

    .user-info {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .chart-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    canvas {
        max-width: 100%;
        height: auto;
    }

    .nav-link {
        font-size: 1rem;
        color: #007bff;
    }

    .nav-link:hover {
        text-decoration: underline;
    }
</style>