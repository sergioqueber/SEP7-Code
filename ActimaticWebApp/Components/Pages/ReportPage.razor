@page "/report"
@using Interfaces
@using AppServices
@inject IReportService ReportService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Model
@inject AppInterfaces.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject ActivitiesService ActivitiesService
@inject IUserService ProfileService
@inject ITeamService TeamService
@inject ITransportService TransportService
@inject ISavingFoodService SavingFoodService
@inject IVolunteeringService VolunteeringService
@inject IStairsService StairsService
@inject ICarPoolService CarPoolService
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container my-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">ESG Report</h2>
        </div>
        <div class="card-body">
            <div class="row">
                <!-- Selection Panel -->
                <div class="col-md-3">
                    <div class="card shadow">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Select</h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="report" OnValidSubmit="NewReport">
                                <div class="mb-3">
                                    <label for="startDate" class="form-label">Start Date</label>
                                    <InputDate @bind-Value="@report.StartDate" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label for="endDate" class="form-label">End Date</label>
                                    <InputDate @bind-Value="@report.EndDate" class="form-control" />
                                </div>
                                <button type="submit" class="btn btn-primary w-100 mb-3">Submit Dates</button>
                            </EditForm>

                            <label for="kind" class="form-label">Kind of Report:</label>
                            <InputSelect id="kind" @bind-Value="tempKind" class="form-select mb-3">
                                <option value="0">-- Select --</option>
                                <option value="1">Team</option>
                                <option value="2">Specific Worker</option>
                                <option value="3">Everyone</option>
                            </InputSelect>
                            <button @onclick="ConfirmSelection" class="btn btn-primary w-100">Confirm</button>

                            @if (kind == 1)
                            {
                                <h5 class="mt-4">Teams</h5>
                                <InputRadioGroup @bind-Value="selectedTeamId" class="list-unstyled">
                                    @foreach (var team in Teams)
                                    {
                                        <li>
                                            <label>
                                                <InputRadio Value="@team.Id" /> @team.Name
                                            </label>
                                        </li>
                                    }
                                </InputRadioGroup>
                            }
                            @if (kind == 2)
                            {
                                <h5 class="mt-4">Employees</h5>
                                <InputRadioGroup @bind-Value="selectedUserId" class="list-unstyled">
                                    @foreach (var user in users)
                                    {
                                        <li>
                                            <label>
                                                <InputRadio Value="@user.Id" /> @user.Name @user.Surname
                                            </label>
                                        </li>
                                    }
                                </InputRadioGroup>
                            }
                        </div>
                    </div>
                </div>

                <!-- Activities Panel -->
                <div class="col-md-6">
                    <div class="card shadow">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Activities</h5>
                        </div>
                        <div class="card-body">
                            <!-- Car Pooling -->
                            @if (tempcarPools != null)
                            {
                                <h5>Car Pooling</h5>
                                <ul class="list-unstyled">
                                    @foreach (var carPool in tempcarPools)
                                    {
                                        <li>@carPool.Name: @carPool.AwardedPoints points on @carPool.Date</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No car pooling activities in the selected period of time.</p>
                            }

                            <!-- Transport -->
                            @if (temptransports != null)
                            {
                                <h5>Transport</h5>
                                <ul class="list-unstyled">
                                    @foreach (var transport in temptransports)
                                    {
                                        <li>@transport.Name: @transport.AwardedPoints points on @transport.Date</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No transport activities in the selected period of time.</p>
                            }

                            <!-- Saving Food -->
                            @if (tempsavingFoods != null)
                            {
                                <h5>Saving Food</h5>
                                <ul class="list-unstyled">
                                    @foreach (var savingFood in tempsavingFoods)
                                    {
                                        <li>@savingFood.Name: @savingFood.AwardedPoints points on @savingFood.Date</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No food-saving activities in the selected period of time.</p>
                            }

                            <!-- Volunteering -->
                            @if (tempvolunteerings != null)
                            {
                                <h5>Volunteering</h5>
                                <ul class="list-unstyled">
                                    @foreach (var volunteering in tempvolunteerings)
                                    {
                                        <li>@volunteering.Name: @volunteering.AwardedPoints points on @volunteering.Date</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No volunteering activities in the selected period of time.</p>
                            }

                            <!-- Stairs -->
                            @if (tempstairs != null)
                            {
                                <h5>Stairs</h5>
                                <ul class="list-unstyled">
                                    @foreach (var stair in tempstairs)
                                    {
                                        <li>@stair.Name: @stair.AwardedPoints points on @stair.Date</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No stairs activities in the selected period of time.</p>
                            }
                        </div>
                    </div>
                </div>

                <!-- Stats Panel -->
                <div class="col-md-3">
                    <div class="card shadow">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Stats</h5>
                        </div>
                        <div class="card-body">
                            @if (EmissionsSaved > 1000){
                            <p><strong>Emissions Saved:</strong> @(EmissionsSaved/1000) kg CO2</p>
                            }else{
                                <p><strong>Emissions Saved:</strong> @EmissionsSaved g CO2</p>
                            }

                            <p><strong>Food Saved:</strong> @SavedFood kg</p>
                            <p><strong>Hours Volunteered:</strong> @HoursVolunteered</p>
                            <p><strong>Floors Covered:</strong> @FloorsCovered</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User? user = null;
    private IEnumerable<User>? users;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int id;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private Report report = new Report();
    private int kind;
    private int tempKind;
    public IEnumerable<Team>? Teams = Enumerable.Empty<Team>();
    private IEnumerable<User> TeamUsers = Enumerable.Empty<User>();
    private int selectedTeamId = 0;
    private int selectedUserId;
    private IEnumerable<CarPool>? carPools = Enumerable.Empty<CarPool>();
    private IEnumerable<Transport>? transports = Enumerable.Empty<Transport>();
    private IEnumerable<SavingFood>? savingFoods = Enumerable.Empty<SavingFood>();
    private IEnumerable<Stairs>? stairs = Enumerable.Empty<Stairs>();
    private IEnumerable<Volunteering>? volunteerings = Enumerable.Empty<Volunteering>();
    private IEnumerable<CarPool>? tempcarPools = Enumerable.Empty<CarPool>();
    private IEnumerable<Transport>? temptransports = Enumerable.Empty<Transport>();
    private IEnumerable<SavingFood>? tempsavingFoods = Enumerable.Empty<SavingFood>();
    private IEnumerable<Stairs>? tempstairs = Enumerable.Empty<Stairs>();
    private IEnumerable<Volunteering>? tempvolunteerings = Enumerable.Empty<Volunteering>();
    private int EmissionsSaved;
    private int SavedFood;
    private int HoursVolunteered;
    private int FloorsCovered;
    private Team? team = null;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            if (authState == null)
            {
                Console.WriteLine("authState not found.");
            }
            ClaimsPrincipal userToLog = authState.User;
            isLoggedIn = userToLog.Identity != null;

            var role = userToLog.Claims.FirstOrDefault(c => c.Type == "Role")?.Value;
            Console.WriteLine($"User is authenticated with role: {role}");

            if (!isLoggedIn) return;
            userClaims = userToLog.Claims;
            id = int.Parse(userToLog.Claims.First(claim => claim.Type.Equals("Id")).Value);
            Console.WriteLine("Id is : " + id);
            Teams = await TeamService.GetAllTeams();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }

        user = await ProfileService.GetUserById(id);
        users = await ProfileService.GetAllUsers();
        Teams = await TeamService.GetAllTeams();
        report.StartDate = DateOnly.FromDateTime(DateTime.Now);
        report.EndDate = DateOnly.FromDateTime(DateTime.Now);
    }

    private async Task NewReport()
    {
        carPools = await ActivitiesService.GetCarPoolByDatesAsync(report.StartDate, report.EndDate);
        transports = await ActivitiesService.GetTransportByDatesAsync(report.StartDate, report.EndDate);
        savingFoods = await ActivitiesService.GetSavingFoodByDatesAsync(report.StartDate, report.EndDate);
        stairs = await ActivitiesService.GetStairsByDatesAsync(report.StartDate, report.EndDate);
        volunteerings = await ActivitiesService.GetVolunteeringByDatesAsync(report.StartDate, report.EndDate);
        tempcarPools = carPools;
        tempsavingFoods = savingFoods;
        tempstairs = stairs;
        temptransports = transports;
        tempvolunteerings = volunteerings;
    }
    private int CalcEmissions(IEnumerable<Transport> transports)
    {
        int sum = 0;
        if (transports != null)
        {
            foreach (var transport in transports)
            {
                sum += transport.EmissionsSaved;
            }
        }
        return sum;
    }
    private int CalcFood(IEnumerable<SavingFood> savingFoods)
    {
        int sum = 0;
        if (savingFoods != null)
        {
            foreach (var savings in savingFoods)
            {
                sum += savings.PackagesSaved;
            }
        }
        return sum;
    }
    private int CalcHours(IEnumerable<Volunteering> volunteerings)
    {
        int sum = 0;
        if (volunteerings != null)
        {
            foreach (var vol in volunteerings)
            {
                sum += vol.Hours;
            }
        }
        return sum;
    }
    private int CalcFloors(IEnumerable<Stairs> stairs)
    {
        int sum = 0;
        if (stairs != null)
        {
            foreach (var stair in stairs)
            {
                sum += stair.Floors;
            }
        }
        return sum;
    }
    private async Task HandleSelect(int value)
    {
        if (value == 0)
            Console.WriteLine("This was 0");
        if (value == 1)
        {
            Teams = await TeamService.GetAllTeams();
            if (selectedTeamId != 0)
            {
                TeamUsers = await ProfileService.GetAllUsersByTeamId(selectedTeamId);
                IEnumerable<CarPool> carPoolsByTeam = Enumerable.Empty<CarPool>();
                IEnumerable<SavingFood> savingFoodByTeam = Enumerable.Empty<SavingFood>();
                IEnumerable<Transport> transportsByTeam = Enumerable.Empty<Transport>();
                IEnumerable<Stairs> stairsByTeam = Enumerable.Empty<Stairs>();
                IEnumerable<Volunteering> volunteeringsByTeam = Enumerable.Empty<Volunteering>();

                if (TeamUsers != null)
                {
                    foreach (var user in TeamUsers)
                    {
                        carPoolsByTeam = carPoolsByTeam.Concat(carPools.Where(x => x.UserId == user.Id));
                        savingFoodByTeam = savingFoodByTeam.Concat(savingFoods.Where(x => x.UserId == user.Id));
                        transportsByTeam = transportsByTeam.Concat(transports.Where(x => x.UserId == user.Id));
                        stairsByTeam = stairsByTeam.Concat(stairs.Where(x => x.UserId == user.Id));
                        volunteeringsByTeam = volunteeringsByTeam.Concat(volunteerings.Where(x => x.UserId == user.Id));
                    }
                }
                EmissionsSaved = CalcEmissions(transportsByTeam);
                SavedFood = CalcFood(savingFoodByTeam);
                HoursVolunteered = CalcHours(volunteeringsByTeam);
                FloorsCovered = CalcFloors(stairsByTeam);
                tempcarPools = carPoolsByTeam;
                tempsavingFoods = savingFoodByTeam;
                temptransports = transportsByTeam;
                tempstairs = stairsByTeam;
                tempvolunteerings = volunteeringsByTeam;
            }
        }
        else if (value == 2)
        {
            var carPoolsByUser = carPools.Where(x => x.UserId == selectedUserId);
            var volunteeringsByUser = volunteerings.Where(x => x.UserId == selectedUserId);
            var savingFoodsByUser = savingFoods.Where(x => x.UserId == selectedUserId);
            var stairsByUser = stairs.Where(x => x.UserId == selectedUserId);
            var transportsByUser = transports.Where(x => x.UserId == selectedUserId);
            EmissionsSaved = CalcEmissions(transportsByUser);
            SavedFood = CalcFood(savingFoodsByUser);
            HoursVolunteered = CalcHours(volunteeringsByUser);
            FloorsCovered = CalcFloors(stairsByUser);
            tempcarPools = carPoolsByUser;
            tempvolunteerings = volunteeringsByUser;
            tempsavingFoods = savingFoodsByUser;
            tempstairs = stairsByUser;
            temptransports = transportsByUser;
        }
        else if (value == 3)
        {
            tempcarPools = carPools;
            tempsavingFoods = savingFoods;
            tempstairs = stairs;
            temptransports = transports;
            tempvolunteerings = volunteerings;
            EmissionsSaved = CalcEmissions(transports);
            SavedFood = CalcFood(savingFoods);
            HoursVolunteered = CalcHours(volunteerings);
            FloorsCovered = CalcFloors(stairs);
        }
    }
    private async Task ConfirmSelection()
    {
        kind = tempKind;
        await HandleSelect(kind);
        StateHasChanged();
    }
}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    header h1 {
        font-size: 2rem;
        font-weight: bold;
    }

    .user-info {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .chart-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    canvas {
        max-width: 100%;
        height: auto;
    }

    .nav-link {
        font-size: 1rem;
        color: #007bff;
    }

    .nav-link:hover {
        text-decoration: underline;
    }
</style>