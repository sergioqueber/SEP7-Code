@page "/myteam"
@using Interfaces;
@using Model;
@inject ITeamService TeamService
@inject IUserService UserService
@inject IRewardService RewardService
@inject IDepartmentService DepartmentService
@inject AppInterfaces.IAuthService AuthService
@inject IRedeemedRewardService RedeemedRewardService
@using Microsoft.AspNetCore.Authorization

<div class="container mt-5">
    <AuthorizeView Policy="MustBeAdminOrManager">
        <Authorized>
            <div class="d-flex justify-content-start mb-4">
                <button @onclick="ToggleCreateTeamForm" class="btn btn-primary me-2">Create Team</button>
                <button @onclick="ToggleDisplayTeamForm" class="btn btn-secondary me-2">Display Teams</button>
                <button @onclick="ToggleAddEmployeesForm" class="btn btn-secondary me-2">Add Employees to a Team</button>

            </div>

            @if (showCreateTeamForm)
            {
                <div class="card shadow mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Create a New Team</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="teamName" class="form-label"><b>Team Name</b></label>
                            <input id="teamName" @bind="newTeamName" placeholder="Enter team name" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="department" class="form-label"><b>Select Department</b></label>
                            <div class="input-group"> 
                            <select id="department" @bind="selectedDepartmentId" class="form-control">
                                <option value="0">-- Select a Department --</option>
                                @foreach (var department in availableDepartments)
                                {
                                    <option value="@department.Id">@department.Name</option>
                                }
                            </select>
                        </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button @onclick="CreateTeam" class="btn btn-success me-2">Submit</button>
                            <button @onclick="ToggleCreateTeamForm" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </div>
            }

 @if (showDisplayTeamForm)
            {
                <div class="card shadow mt-4">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0">All Teams</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            @foreach (var team in availableTeams)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                            
                                    @if (editingTeamId == team.Id)
                                    {
                                        <input type="text" @bind="team.Name" class="form-control me-2" />
                                        <button @onclick="async () => await SaveTeam(team)" class="btn btn-primary me-2">Save</button>
                                        <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
                                    }
                                    else
                                    {  
                                        @team.Name
                                        <button @onclick="() => EditTeam(team.Id)" class="btn btn-warning ms-2">Edit</button>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }

            @if (showAddEmployeesForm)
            {
                <div class="card shadow mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h4 class="mb-0">Add Employees to a Team</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="teamSelect" class="form-label"><b>Select Team</b></label>
                            <select id="teamSelect" @bind="selectedTeamId" class="form-control">
                                <option value="0">-- Select a Team --</option>
                                @foreach (var team in availableTeams)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                             <label class="form-label"><b>Select Employees to Add:</b></label>
                            <div class="form-check">
                                @foreach (var user in availableUsers)
                                {
                                    <div class="form-check mb-1">
                                        <input class="form-check-input" type="checkbox" id="user_@user.Id" value="@user.Id" @onchange="e => ToggleUserSelection(e, user.Id)" />
                                        <label class="form-check-label" for="user_@user.Id">
                                            @user.Name @user.Surname
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button @onclick="AddEmployeesToTeam" class="btn btn-success me-2">Submit</button>
                            <button @onclick="ToggleAddEmployeesForm" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </div>
            }

        </Authorized>
    </AuthorizeView>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3 text-center">@successMessage</div>
    }

    <div class="card shadow mt-4">
        <div class="card-header bg-info text-white">
            <h3 class="mb-0">My Team</h3>
        </div>
        <div class="card-body">
            @if (currentUser == null)
            {
                <p>Loading user data...</p>
            }
            else if (currentUser.TeamId == null)
            {
                <p>User is not part of any team.</p>
            }
            else if (team == null)
            {
                <p>Loading team data...</p>
            }
            else
            {
                <div class="mb-4">
                    <h4>Your team currently has @team?.TotalPoints points</h4>
    <div class="table-responsive">
        <table class="table table-striped table-bordered mt-3">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Points</th>
                </tr>
            </thead>
            <tbody>
                @if (teamMembers != null && teamMembers.Any())
                {
                    @foreach (var member in teamMembers)
                    {
                        <tr>
                            <td>@member.Name @member.Surname</td>
                            <td>@member.Points</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" class="text-center">No team members found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="card mt-3">
                    <div class="card-header bg-success text-white">
                        <h5>Contribute Points to Your Team</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="pointsToContribute" class="form-label">Points to Contribute:</label>
                            <input type="number" id="pointsToContribute" @bind="pointsToContribute" class="form-control" />
                        </div>
                        <button @onclick="ContributePoints" class="btn btn-primary">Contribute</button>
                    </div>
                </div>

                   <div class="col-md-6 mt-4">
    <h5>Team Rewards</h5>
    @if (rewards != null && rewards.Any(r => r.IsTeamReward))
    {
        @foreach (var reward in rewards.Where(r => r.IsTeamReward))
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h6 class="card-title">@reward.Name</h6>
                    <p class="card-text">@reward.Description</p>
                    <p class="card-text"><small>Points required: <b>@reward.PointsRequired</b></small></p>
                    <button class="btn btn-primary btn-sm" @onclick="() => RedeemTeamReward(reward)">Redeem</button>
                </div>
            </div>
        }
    }
    else
    {
        <p>No team rewards available.</p>
    }
</div>
                
            }
        </div>
    </div>
</div>

@code {
    private Team? team;
    private User? currentUser;
    private List<User>? members = new();
    private List<Reward>? rewards = new();
    private string newTeamName = string.Empty; 
    private int selectedDepartmentId = 0; 
    private List<int> selectedUserIds = new(); 
    private List<User> availableUsers = new(); 
    private List<Model.Department> availableDepartments = new(); // List of departments to select from
    private bool showCreateTeamForm = false;
    private bool showDisplayTeams = false;
    private List<Team> allTeams = new();
    private int? editingTeamId = null;
     private string successMessage = string.Empty;
       private bool showAddEmployeesForm = false;
       private bool showDisplayTeamForm = false;
    private int selectedTeamId = 0;
    private List<Team> availableTeams = new();
        private List<User> teamMembers = new();
    private int totalTeamPoints = 0;
    private int pointsToContribute = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
           
            var principal = await AuthService.GetAuthAsync();
            var userIdClaim = principal.Claims.FirstOrDefault(c => c.Type == "Id");

            if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
            {
                return;
            }

            
            currentUser = await UserService.GetUserById(userId);

            if (currentUser?.TeamId != null)
            {
                
                team = await TeamService.GetTeamById(currentUser.TeamId ?? 0);

                if (team != null)
                {
                    
                teamMembers = (await UserService.GetAllUsers())
                    .Where(u => u.TeamId == currentUser.TeamId)
                    .ToList();

                     totalTeamPoints = team.TotalPoints;

                    
                    rewards = (await RewardService.GetAllRewards())
    .Where(r => r.IsTeamReward && r.Availability)
    .ToList();
                }
            }
            else
            {
                Console.WriteLine("User is not part of any team.");
            }

            availableDepartments = (await DepartmentService.GetAllDepartments()).ToList();
            availableTeams = (await TeamService.GetAllTeams()).ToList();
            availableUsers = (await UserService.GetAllUsers())
            .Where(u => u.TeamId == null)
            .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

 
private async Task ContributePoints()
{
    if (pointsToContribute <= 0)
    {
        Console.WriteLine("Points to contribute must be greater than 0.");
        return;
    }

    if (currentUser.Points < pointsToContribute)
    {
        Console.WriteLine("You do not have enough points to contribute.");
        return;
    }

    try
    {
        currentUser.Points -= pointsToContribute;
        await UserService.UpdateUser(currentUser);

        if (team != null)
        {
            team.TotalPoints += pointsToContribute;
            await TeamService.UpdateTeam(team);

        // Refresh
        foreach (var member in teamMembers)
            {
                if (member.Id == currentUser.Id)
                {
                    member.Points -= pointsToContribute;
                    break;
                }
            }
            totalTeamPoints = team.TotalPoints;
        }

        // Reset the input
        pointsToContribute = 0;

        Console.WriteLine("Points successfully contributed.");
        successMessage = "Points successfully contributed to your team!";
        
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error contributing points: {ex.Message}");
    }
}

 private async Task RedeemTeamReward(Reward reward)
{
    try
    {
        
        if (team != null && team.TotalPoints >= reward.PointsRequired)
        {
            
            team.TotalPoints -= reward.PointsRequired;
            await TeamService.UpdateTeam(team);

            
            var redeemedReward = new RedeemedReward
            {
                RewardId = reward.Id,
                TeamId = team.Id, 
                Date = DateOnly.FromDateTime(DateTime.Now)
            };

            await RedeemedRewardService.CreateRedeemedReward(redeemedReward);

            reward.Availability = false;
            await RewardService.UpdateReward(reward);

            rewards = (await RewardService.GetAllRewards())
                .Where(r => r.IsTeamReward && r.Availability)
                .ToList();
           

            // Log success and refresh UI
            Console.WriteLine($"Reward '{reward.Name}' redeemed for the team.");
            successMessage = $"Reward '{reward.Name}' successfully redeemed for the team!";
            
            StateHasChanged();
        }
        else
        {
            // Handle insufficient points
            //errorMessage = "Not enough team points to redeem this reward.";
           // Console.WriteLine(errorMessage);
        }
    }
    catch (Exception ex)
    {
        //Console.WriteLine($"Error redeeming reward: {ex.Message}");
        //errorMessage = "An error occurred while redeeming the reward. Please try again.";
    }
}
    private async Task CreateTeam()
    {
        Console.WriteLine("CreateTeam method triggered.");
        try
        {
            // Ensure the team name is not empty
            if (string.IsNullOrEmpty(newTeamName))
            {
                Console.WriteLine("Team name cannot be empty.");
                return;
            }

            // Ensure a department is selected
            if (selectedDepartmentId == 0)
            {
                Console.WriteLine("Please select a valid department.");
                return;
            }

            var newTeam = new Team
                {
                    Name = newTeamName,
                    DepartmentId = selectedDepartmentId,
                @* TeamRewards = new List<Reward>() // Empty list for now *@
};
            var createdTeam = await TeamService.CreateTeam(newTeam);

            if (createdTeam != null)
            {
                successMessage = $"Team '{createdTeam.Name}' created successfully!";
                
                Console.WriteLine($"Team '{createdTeam.Name}' created successfully!");
                 newTeamName = string.Empty;
                selectedDepartmentId = 0;
                showCreateTeamForm = false;
                 StateHasChanged();
              }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating team: {ex.Message}");
        }
    }
    private void ToggleCreateTeamForm()
    {
        showCreateTeamForm = !showCreateTeamForm;
    }
private void ToggleDisplayTeamForm()
    {
        showDisplayTeamForm = !showDisplayTeamForm;
    }
 private void ToggleAddEmployeesForm()
    {
        showAddEmployeesForm = !showAddEmployeesForm;
    }

    private async Task AddEmployeesToTeam()
    {
        try
        {
            // Ensure a team is selected
            if (selectedTeamId == 0)
            {
                Console.WriteLine("Please select a valid team.");
                return;
            }

            // Ensure at least one employee is selected
            if (!selectedUserIds.Any())
            {
                Console.WriteLine("Please select at least one employee to add.");
                return;
            }

            // Update each selected user's TeamId
            foreach (var userId in selectedUserIds)
            {
                var user = await UserService.GetUserById(userId);
                if (user != null)
                {
                    user.TeamId = selectedTeamId;
                    await UserService.UpdateUser(user);
                }
            }

            successMessage = "Employees added to the team successfully!";
            
            Console.WriteLine(successMessage);
            selectedTeamId = 0;
            selectedUserIds.Clear();
            showAddEmployeesForm = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding employees to the team: {ex.Message}");
        }
    }
private void ToggleUserSelection(ChangeEventArgs e, int userId)
{
    var isChecked = e?.Value != null && (bool)e.Value;
    Console.WriteLine($"UserId: {userId}, Checked: {isChecked}");
    if (isChecked && !selectedUserIds.Contains(userId))
    {
        selectedUserIds.Add(userId);
    }
    else if (!isChecked && selectedUserIds.Contains(userId))
    {
        selectedUserIds.Remove(userId);
    }
}

private async Task SaveTeam(Team team)
{
    try
    {
        await TeamService.UpdateTeam(team);
        editingTeamId = null;
        successMessage = "Team updated successfully!";
        
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error saving team: {ex.Message}");
    }
}
private void CancelEdit()
    {
        editingTeamId = null;
    }
private void EditTeam(int departmentId)
    {
        editingTeamId = departmentId;
    }


    private async Task RedeemReward(Reward reward)
    {
        if (team != null && team.Staff != null && team.Staff.Any())
        {
            var totalPoints = team.Staff.Sum(u => u.Points);

            if (totalPoints >= reward.PointsRequired)
            {
                foreach (var user in team.Staff)
                {
                    if (user.Points > 0)
                    {
                        var pointsToDeduct = Math.Min(reward.PointsRequired, user.Points);
                        user.Points -= pointsToDeduct;
                        reward.PointsRequired -= pointsToDeduct;

                        if (reward.PointsRequired == 0)
                        {
                            break;
                        }
                    }
                }

                await RewardService.UpdateReward(reward);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Not enough points to redeem this reward.");
            }
        }
    }
}
