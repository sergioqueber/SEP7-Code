@page "/myteam"
@using Interfaces;
@using Model;
@inject ITeamService TeamService
@inject IUserService UserService
@inject IRewardService RewardService
@inject IDepartmentService DepartmentService
@inject AppInterfaces.IAuthService AuthService
@using Microsoft.AspNetCore.Authorization

<AuthorizeView Policy="MustBeManager">
    <Authorized>
        <button @onclick="ToggleCreateTeamForm" class="btn btn-primary">Create Team</button>
        <button @onclick="ToggleAddEmployeesForm" class="btn btn-secondary">Add Employees to a Team</button>
        
        @if (showCreateTeamForm)
        {
            <div>
                <h4>Create a New Team</h4>
                <div>
                    <label for="teamName">Team Name:</label>
                    <input id="teamName" @bind="newTeamName" placeholder="Enter team name" class="form-control" />
                </div>
                <div>
                    <label for="department">Select Department:</label>
                    <select id="department" @bind="selectedDepartmentId" class="form-control">
                        <option value="0">-- Select a Department --</option>
                        @foreach (var department in availableDepartments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <button @onclick="CreateTeam" class="btn btn-success">Submit</button>
                    <button @onclick="ToggleCreateTeamForm" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        }

@if (showAddEmployeesForm)
        {
            <div>
                <h4>Add Employees to a Team</h4>
                <div>
                    <label for="teamSelect">Select Team:</label>
                    <select id="teamSelect" @bind="selectedTeamId" class="form-control">
                        <option value="0">-- Select a Team --</option>
                        @foreach (var team in availableTeams)
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <h5>Select Employees to Add:</h5>
                    @foreach (var user in availableUsers)
                    {
                        <div>
                            <input type="checkbox" id="user_@user.Id" value="@user.Id" @onchange="e => ToggleUserSelection(e, user.Id)" />
                            <label for="user_@user.Id">@user.Name @user.Surname</label>
                        </div>
                    }
                </div>
                <div>
                    <button @onclick="AddEmployeesToTeam" class="btn btn-success">Submit</button>
                    <button @onclick="ToggleAddEmployeesForm" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        }

    </Authorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

<h3>My Team</h3>

@if (currentUser == null)
{
    <p>Loading user data...</p>
}
else if (currentUser.TeamId == null)
{
    <p>User is not part of any team.</p>
}
else if (team == null)
{
    <p>Loading team data...</p>
}
else
{
    <div>
        <h4>Your team currently has @team.Staff.Sum(u => u.Points) points</h4>
        <div style="display: flex; justify-content: space-between;">
            <div style="flex: 1; margin-right: 20px;">
                <h5>Team Members</h5>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Points</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var member in members)
                        {
                            <tr>
                                <td>@member.Name @member.Surname</td>
                                <td>@member.Points</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div style="flex: 1;">
                <h5>Rewards</h5>
                <div class="reward-container">
                    @if (rewards != null && rewards.Any())
                    {
                        @foreach (var reward in rewards)
                        {
                            <div class="reward-item">
                                <h6>@reward.Name</h6>
                                <p>@reward.Description</p>
                                <p>Points required: @reward.PointsRequired</p>
                                <button @onclick="() => RedeemReward(reward)">Redeem</button>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No rewards available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Team? team;
    private User? currentUser;
    private List<User>? members = new();
    private List<Reward>? rewards = new();

    private string newTeamName = string.Empty; // Added newTeamName
    private int selectedDepartmentId = 0; // Added selectedDepartmentId
    private List<int> selectedUserIds = new(); // List to hold selected user IDs
    private List<User> availableUsers = new(); // List of users to select from
    private List<Department> availableDepartments = new(); // List of departments to select from
    private bool showCreateTeamForm = false;
     private string successMessage = string.Empty;
       private bool showAddEmployeesForm = false;
    private int selectedTeamId = 0;
    private List<Team> availableTeams = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the logged-in user's claims from the JwtAuthService
            var principal = await AuthService.GetAuthAsync();
            var userIdClaim = principal.Claims.FirstOrDefault(c => c.Type == "Id");

            if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
            {
                Console.WriteLine("User is not logged in.");
                return;
            }

            // Fetch the user by ID
            currentUser = await UserService.GetUserById(userId);

            if (currentUser?.TeamId != null)
            {
                // Fetch the team associated with the logged-in user
                team = await TeamService.GetTeamById(currentUser.TeamId ?? 0);

                if (team != null)
                {
                    // Fetch team members
                    members = team.Staff ?? new List<User>();

                    // Fetch rewards associated with the team
                    rewards = (await RewardService.GetAllRewards()).ToList();
                }
            }
            else
            {
                Console.WriteLine("User is not part of any team.");
            }
            availableDepartments = (await DepartmentService.GetAllDepartments()).ToList();

// Fetch available teams for the "Add Employees to a Team" dropdown
        availableTeams = (await TeamService.GetAllTeams()).ToList();

        // Fetch available users who are not assigned to any team
        availableUsers = (await UserService.GetAllUsers())
            .Where(u => u.TeamId == null)
            .ToList();
    

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task CreateTeam()
    {
        Console.WriteLine("CreateTeam method triggered.");
        try
        {
            // Ensure the team name is not empty
            if (string.IsNullOrEmpty(newTeamName))
            {
                Console.WriteLine("Team name cannot be empty.");
                return;
            }

            // Ensure a department is selected
            if (selectedDepartmentId == 0)
            {
                Console.WriteLine("Please select a valid department.");
                return;
            }

            // Create a new Team object
            var newTeam = new Team
                {
                    Name = newTeamName,
                    DepartmentId = selectedDepartmentId,
                @* TeamRewards = new List<Reward>() // Empty list for now *@
};

            // Call TeamService to create the team
            var createdTeam = await TeamService.CreateTeam(newTeam);

            if (createdTeam != null)
            {
                successMessage = $"Team '{createdTeam.Name}' created successfully!";
                Console.WriteLine($"Team '{createdTeam.Name}' created successfully!");
                 newTeamName = string.Empty;
                selectedDepartmentId = 0;
                showCreateTeamForm = false;
                 StateHasChanged();
              }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating team: {ex.Message}");
        }
    }
    private void ToggleCreateTeamForm()
    {
        showCreateTeamForm = !showCreateTeamForm;
    }

 private void ToggleAddEmployeesForm()
    {
        showAddEmployeesForm = !showAddEmployeesForm;
    }

    private async Task AddEmployeesToTeam()
    {
        try
        {
            // Ensure a team is selected
            if (selectedTeamId == 0)
            {
                Console.WriteLine("Please select a valid team.");
                return;
            }

            // Ensure at least one employee is selected
            if (!selectedUserIds.Any())
            {
                Console.WriteLine("Please select at least one employee to add.");
                return;
            }

            // Update each selected user's TeamId
            foreach (var userId in selectedUserIds)
            {
                var user = await UserService.GetUserById(userId);
                if (user != null)
                {
                    user.TeamId = selectedTeamId;
                    await UserService.UpdateUser(user);
                }
            }

            successMessage = "Employees added to the team successfully!";
            Console.WriteLine(successMessage);
            selectedTeamId = 0;
            selectedUserIds.Clear();
            showAddEmployeesForm = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding employees to the team: {ex.Message}");
        }
    }
private void ToggleUserSelection(ChangeEventArgs e, int userId)
{
    var isChecked = e?.Value != null && (bool)e.Value;
    Console.WriteLine($"UserId: {userId}, Checked: {isChecked}");
    if (isChecked && !selectedUserIds.Contains(userId))
    {
        selectedUserIds.Add(userId);
    }
    else if (!isChecked && selectedUserIds.Contains(userId))
    {
        selectedUserIds.Remove(userId);
    }
}



    private async Task RedeemReward(Reward reward)
    {
        if (team != null && team.Staff != null && team.Staff.Any())
        {
            var totalPoints = team.Staff.Sum(u => u.Points);

            if (totalPoints >= reward.PointsRequired)
            {
                foreach (var user in team.Staff)
                {
                    if (user.Points > 0)
                    {
                        var pointsToDeduct = Math.Min(reward.PointsRequired, user.Points);
                        user.Points -= pointsToDeduct;
                        reward.PointsRequired -= pointsToDeduct;

                        if (reward.PointsRequired == 0)
                        {
                            break;
                        }
                    }
                }

                await RewardService.UpdateReward(reward);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Not enough points to redeem this reward.");
            }
        }
    }
}
