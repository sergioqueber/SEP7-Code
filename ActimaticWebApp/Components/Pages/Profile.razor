@page "/profile"
@using Interfaces
@using AppServices
@inject IUserService ProfileService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Model
@inject AppInterfaces.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6">
            @if (user == null)
            {
                <div class="text-center">
                    <p>Loading...</p>
                </div>
            }
            else
            {
                <div class="card shadow">
                    <div class="card-header bg-primary text-white text-center">
                        <h3 class="mb-0">Profile</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@user" OnValidSubmit="SaveChanges">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label"><b>Name</b></label>
                                @if (isEditing)
                                {
                                    <InputText @bind-Value="user.Name" class="form-control" />
                                }
                                else
                                {
                                    <p class="form-control-plaintext">@user.Name</p>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label"><b>Surname</b></label>
                                @if (isEditing)
                                {
                                    <InputText @bind-Value="user.Surname" class="form-control" />
                                }
                                else
                                {
                                    <p class="form-control-plaintext">@user.Surname</p>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label"><b>Email</b></label>
                                @if (isEditing)
                                {
                                    <InputText @bind-Value="user.Email" class="form-control" />
                                }
                                else
                                {
                                    <p class="form-control-plaintext">@user.Email</p>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label"><b>Password</b></label>
                                @if (isEditing)
                                {
                                    <InputText type="password" @bind-Value="user.Password" class="form-control" />
                                }
                                else
                                {
                                    <div class="d-flex align-items-center">
                                        <p class="form-control-plaintext mb-0">
                                            @(showPassword ? user.Password : new string('â€¢', user.Password.Length))
                                        </p>
                                        <button type="button" class="btn btn-link" @onclick="TogglePasswordVisibility">
                                            ðŸ‘€<i class="fa-solid @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                        </button>
                                    </div>
                                }
                            </div>

                            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                                @if (isEditing)
                                {
                                    <button type="submit" class="btn btn-primary me-md-2">Save Changes</button>
                                    <button type="button" @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
                                }
                                else
                                {
                                    <button type="button" @onclick="EnableEditMode"
                                        class="btn btn-warning me-md-2">Edit</button>
                                    <button type="button" @onclick="DeleteProfile" class="btn btn-danger">Delete
                                        Profile</button>
                                }
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private User? user = null;

    private bool isEditing = false;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int id;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private bool showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal userToLog = authState.User;
        isLoggedIn = userToLog.Identity != null;

        var role = userToLog.Claims.FirstOrDefault(c => c.Type == "Role")?.Value;
        Console.WriteLine($"User is authenticated with role: {role}");

        if (!isLoggedIn) return;
        userClaims = userToLog.Claims;
        id = int.Parse(userToLog.Claims.First(claim => claim.Type.Equals("Id")).Value);
        Console.WriteLine("Id is : " + id);

        user = await ProfileService.GetUserById(id);


    }
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void EnableEditMode()
    {
        isEditing = true;
    }

    private async Task SaveChanges()
    {
        await ProfileService.UpdateUser(user);
        user = await ProfileService.GetUserById(id); // Reload the updated data
        isEditing = false;
    }
    private void CancelEdit()
    {
        isEditing = false; // Exit edit mode without saving
    }
    private async Task DeleteProfile()
    {
        await ProfileService.RemoveUser(id);
        user = null;
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }
}

<style>
    .card {
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .form-control-plaintext {
        padding: 0.375rem 0;
        margin-bottom: 0;
        border: none;
    }
    .btn-link {
        color: #0d6efd; /* Bootstrap primary color */
        padding: 0.375rem;
        margin-left: 0.5rem;
        transition: all 0.2s ease;
    }

    .btn-link:hover {
        color: #0a58ca; /* Darker shade for hover */
        transform: scale(1.1);
    }

    .btn-link i {
        font-size: 1.1rem;
    }
</style>