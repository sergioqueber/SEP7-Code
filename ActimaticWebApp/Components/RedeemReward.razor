@using Interfaces
@inject IRewardService rewardService;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Model

<div class="container mt-4">
    <h2 class="mb-4">Available Rewards</h2>
    <AuthorizeView>
        <button class="btn btn-primary mb-4" @onclick="ToggleModal" >Add Reward</button>
    </AuthorizeView>
    @if (showModal)
    {
        <EditForm Model="@newReward" OnValidSubmit="addReward">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label" >Name</label>
                <InputText @bind-Value="@newReward.Name" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputText @bind-Value="newReward.Description" class="form-control" required />
            </div>
            <div class="mb-3">
                <label class="form-label">Points Required</label>
                <InputNumber @bind-Value="newReward.PointsRequired" class="form-control" required />
            </div>
            <div class="mb-3">
                <label class="form-label">Availability</label>
                <InputCheckbox @bind-Value="newReward.Availability" class="form-check-input" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    }
    @if (rewards == null || !rewards.Any())
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-primary">Loading rewards...</p>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var reward in rewards)
            {
                @if (reward.Availability)
                {

                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@reward.Name</h5>
                                <p class="card-text">@reward.Description</p>
                                <p class="card-text"><small class="text-muted">@reward.PointsRequired Points</small></p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-primary">@reward.PointsRequired Points</span>
                                    <button class="btn btn-success">
                                        Redeem
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private IEnumerable<Reward> rewards = new List<Reward>();
    private bool showModal = false;
    private Reward newReward = new Reward();
    protected override async Task OnInitializedAsync()
    {
        rewards = await rewardService.GetAllRewards();
    }

    private async Task RedeemRewardUser(int rewardId)
    {
        var reward = rewards.FirstOrDefault(r => r.Id == rewardId);
        if (reward == null) return;

    }

    private async Task addReward()
    {
        await rewardService.CreateReward(newReward);
        newReward = new Reward();
        showModal = false;
        rewards = await rewardService.GetAllRewards();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }
}